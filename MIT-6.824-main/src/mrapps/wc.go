package main

//
// a word-count application "plugin" for MapReduce.
//
// go build -buildmode=plugin wc.go
//

import "6.824/mr"
import "unicode"
import "strings"
import "strconv"

//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
// 输入：文件名，文件内容  输出：key/value pair
func Map(filename string, contents string) []mr.KeyValue {
	// function to detect word separators.
	// 判断给定的 rune 是否是一个字母字符 (rune是go的一个类型)
	ff := func(r rune) bool { return !unicode.IsLetter(r) }

	// split contents into an array of words. 按照ff的规则对contents进行分词
	// "hello,world 123" ---> "hello" "world"
	words := strings.FieldsFunc(contents, ff)

	kva := []mr.KeyValue{}
	// _：表示index  w：表示数组的内容
	for _, w := range words {
		kv := mr.KeyValue{w, "1"}
		kva = append(kva, kv)
	}
	return kva
}

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
// 生成的每个键都调用一次reduce方法 
func Reduce(key string, values []string) string {
	// return the number of occurrences of this word.
	// values切片的长度表示单词出现的次数，strconv.Itoa表示将整数(len的结果)转为字符串。
	return strconv.Itoa(len(values))
}
